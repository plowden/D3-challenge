//DEBUG var svgWidth = 650;
//DEBUG var svgHeight = 500;


function makeResponsive() {

  // if the SVG area isn't empty when the browser loads,
  // remove it and replace it with a resized version of the chart
  var svgArea = d3.select("body").select("svg");

  if (!svgArea.empty()) {
    svgArea.remove();
  }

  // svg params
  var svgHeight = window.innerHeight;
  var svgWidth = window.innerWidth;

  var margin = {
    top: 20,
    right: 20,
    bottom: 20,
    left: 50
  };

  var width = svgWidth - margin.left - margin.right;
  var height = svgHeight - margin.top - margin.bottom;


// Create an SVG wrapper, append an SVG group that will hold our chart, and shift the latter by left and top margins.
var svg = d3.select("#scatter")
  .append("svg")
  .attr("width", svgWidth)
  .attr("height", svgHeight);

var chartGroup = svg.append("g")
  .attr("transform", `translate(${margin.left}, ${margin.top})`);

// function used for updating x-scale var upon click on axis label
function xScale(data, chosenXAxis) {
  // create scales
  var xLinearScale = d3.scaleLinear()
    .domain([d3.min(data, d => d[chosenXAxis]) * 0.8,
      d3.max(data, d => d[chosenXAxis]) * 1.2
    ])
    .range([0, width]);

  return xLinearScale;
}

// function used for updating y-scale var upon click on axis label
function yScale(data, chosenYAxis) {
  // create scales
  var yLinearScale = d3.scaleLinear()
    .domain([d3.min(data, d => d[chosenYAxis]) * 0.8,
      d3.max(data, d => d[chosenYAxis]) * 1.2
    ])
    .range([height, 0]);

  return yLinearScale;
}

// function used for updating xAxis var upon click on axis label
function renderXAxis(newXScale, xAxis) {
  var bottomAxis = d3.axisBottom(newXScale);

  xAxis.transition()
    .duration(1000)
    .call(bottomAxis);

  return xAxis;
}


// function used for updating yAxis var upon click on axis label
function renderYAxis(newYScale, yAxis) {
  var leftAxis = d3.axisLeft(newYScale);

  yAxis.transition()
    .duration(1000)
    .call(leftAxis);

  return yAxis;
}

// function used for updating circles group with a transition to
// new circles
function renderCircles(circlesGroup, xLinearScale, chosenXAxis, yLinearScale, chosenYAxis) {

  circlesGroup.transition()
    .duration(1000)
    .attr("cx", d => xLinearScale(d[chosenXAxis]))
    .attr("cy", d => yLinearScale(d[chosenYAxis]));

  return circlesGroup;
}


// function used for updating circles group with new tooltip
function updateToolTip(data, chosenXAxis, chosenYAxis, circlesGroup) {

  //DEBUG console.log("data: ", data);

  switch(chosenXAxis) {
    case "poverty":
      chosenXLabel = "Poverty";
      break;
    case "smokes":
      chosenXLabel = "Smokes";
      break;
    default:
      console.log("Did you forget to choose an X Axis?");
  }

  switch(chosenYAxis) {
    case "age":
      chosenYLabel = "Age";
      break;
    case "income":
      chosenYLabel = "Income";
      break;
    default:
      console.log("Did you forget to choose a Y Axis?");
  }

  var toolTip = d3.tip()
    .attr("class", "tooltip")
    .offset([80, -60])
    .html(function(d) {
      return (`${d.abbr}<br>${chosenXLabel}: ${d[chosenXAxis]}<br>${chosenYLabel}: ${d[chosenYAxis]}`);
    });

  circlesGroup.call(toolTip);

  circlesGroup.on("mouseover", function(data) {
    toolTip.show(data);
  })
    // onmouseout event
    .on("mouseout", function(data, index) {
      toolTip.hide(data);
    });

  return circlesGroup;
}


// Import Data
d3.csv("assets/data/data.csv").then(function(data) {

    // Step 1: Parse Data/Cast as numbers
    // ==============================
    data.forEach(function(data) {
      //console.log("DEBUG: data.poverty: ", data.poverty);
      data.abbr = data.abbr;
      //console.log("DEBUG: data.states: ", data.abbr);
      data.poverty = +data.poverty;
      data.age = +data.age;
      data.income = +data.income;
      data.healthcare = +data.healthcare;
      data.obesity = +data.obesity;
      data.smokes = +data.smokes;
    });


    // Step 2: Create scale functions
    // ==============================
    var chosenXAxis = "poverty";
    var chosenXLabel = "Poverty";
   //var chosenXAxis = "smokes";
    //var chosenXLabel = "Smokes";
    var chosenYAxis = "age";
    var chosenYLabel = "Age";

    //var xLinearScale = d3.scaleLinear()
    //  .domain([d3.min(data, d => d[chosenXAxis])-2, d3.max(data, d => d[chosenXAxis])+2])
    //  .range([0, width]);

    var xLinearScale = xScale(data, chosenXAxis);

    //var yLinearScale = d3.scaleLinear()
    //  .domain([d3.min(data, d=> d[chosenYAxis])-2, d3.max(data, d => d[chosenYAxis])])
    //  .range([height, 0]);

    var yLinearScale = yScale(data, chosenYAxis);

    // Step 3: Create axis functions
    // ==============================
    var bottomAxis = d3.axisBottom(xLinearScale);
    //xAxis = renderXAxis(xLinearScale, xAxis);
    var leftAxis = d3.axisLeft(yLinearScale);

    // Step 4: Append Axes to the chart
    // ==============================
    var xAxis = chartGroup.append("g")
      .classed("x-axis", true)
      //.attr("transform", `translate(${width / 2}, ${height / 2})`)
      //.attr("transform", `translate(0, ${height}`))
      .attr("transform", `translate(0, ${height})`)
      .call(bottomAxis);

    var yAxis = chartGroup.append("g")
      .classed("y-axis", true)
      //.attr("transform", `translate(${height} / 2, 0`)
      //.attr("transform", `translate(${width / 2}, ${height / 2})`)
      .attr("transform", `translate(0, 0)`)
      .call(leftAxis);

  xAxis = renderXAxis(xLinearScale, xAxis);
  yAxis = renderYAxis(yLinearScale, yAxis);

    //chartGroup.append("g")
    //  .call(leftAxis);

    // Step 5: Create Circles
    // ==============================
    var circlesGroup = chartGroup.selectAll("circle")
    .data(data)
    .enter()
    .append("circle")
    .attr("cx", d => xLinearScale(d[chosenXAxis]))
    .attr("cy", d => yLinearScale(d[chosenYAxis]))
    .attr("r", "15")
    .attr("fill", "lightblue")
    .attr("opacity", ".5");
    //.attr("dx", function(d) {return d.addr}); // HERE

// Create group for  2 x-axis labels
  var labelsGroupX = chartGroup.append("g")
    //.attr("transform", `translate(${width / 2}, ${height + 20})`);
    .attr("transform", `translate(${width / 2}, ${height / 2})`);

  var povertyLabel = labelsGroupX.append("text")
    .attr("x", 0)
    .attr("y", 20)
    .attr("value", "poverty") // value to grab for event listener
    .classed("axis-text", true)
    .classed("active", true)
    .text("Poverty");

  var smokesLabel = labelsGroupX.append("text")
    .attr("x", 0)
    .attr("y", 40)
    .attr("value", "smokes") // value to grab for event listener
    .classed("axis-text", true)
    .classed("inactive", true)
    .text("Smokes");

// Create group for  2 y-axis labels
  var labelsGroupY = chartGroup.append("g")
    .attr("transform", `translate(${height / 2}, ${width + 20})`);

  var w=100;
  var h=-170;
  var ageLabel = labelsGroupY.append("text")
    //.attr("transform", `translate(${width/2}, ${height/2 })`) // HERE
    .attr("transform", `translate(${w*2}, ${h*2 })`) // HERE
    .attr("transform", "rotate(-90)")
    .attr("x", 0)
    .attr("y", 20)
    .attr("value", "age") // value to grab for event listener
    .classed("active", true)
    .classed("axis-text", true)
    .text("Age");


  var incomeLabel = labelsGroupY.append("text")
    .attr("transform", "rotate(-90)")
    //.attr("transform", `translate(${width/2}, ${height/2})`) // HERE
    .attr("transform", `translate(${w*2}, ${h*2})`) // HERE
    .attr("x", 0)
    .attr("y", 40)
    .classed("inactive", true)
    .classed("axis-text", true)
    .attr("value", "income") // value to grab for event listener
    .text("Income");


  // append y axis
  //chartGroup.append("text")
  //  .attr("transform", "rotate(90)")
  //  .attr("y", 0 - margin.left)
  //  .attr("x", 0 - (height / 2))
  //  .attr("dy", "1em")
  //  .classed("axis-text", true)
  //  .text("Age");

  // updateToolTip function above csv import

  //DEBUG console.log("data: ", data);
  var circlesGroup = updateToolTip(data, chosenXAxis, chosenYAxis, circlesGroup);


    // Step 6: Initialize tool tip
    // ==============================
    //var toolTip = d3.tip()
    //  .attr("class", "tooltip")
    //  .offset([80, -60])
    //  .html(function(d) {
    //    return (`${d.abbr}<br>${chosenXLabel}: ${d[chosenXAxis]}<br>${chosenYLabel}: ${d[chosenYAxis]}`);
    //  });

    // Step 7: Create tooltip in the chart
    // ==============================
    //chartGroup.call(toolTip);

    // Step 8: Create event listeners to display and hide the tooltip
    // ==============================
    //circlesGroup.on("mouseover", function(data) {
      //toolTip.show(data, this);
    //  circlesGroup = updateToolTip(d.abbr, chosenXAxis, chosenYAxis, chosenXLabel, chosenYLabel, circlesGroup);
    //})
      // onmouseout event
    //  .on("mouseout", function(data, index) {
    //    toolTip.hide(data);
    //  });

    // Create axes labels
    //chartGroup.append("text")
    //  .attr("transform", "rotate(-90)")
    //  .attr("y", 0 - margin.left + 40)
    //  .attr("x", 0 - (height / 2))
    //  .attr("dy", "1em")
    //  .attr("class", "axisText")
    //  .text(`${chosenYLabel}`);

    //chartGroup.append("text")
    //  .attr("transform", `translate(${width / 2}, ${height + margin.top + 30})`)
    //  .attr("class", "axisText")
    //  .text(`${chosenXLabel}`);


  // x axis labels event listener
  xLinearScale = xScale(data, chosenXAxis);
  yLinearScale = yScale(data, chosenYAxis);
  xAxis = renderXAxis(xLinearScale, xAxis);
  yAxis = renderYAxis(yLinearScale, yAxis);
  labelsGroupX.selectAll("text")
    .on("click", function() {
      // get value of selection
      var value = d3.select(this).attr("value");
      if (value !== chosenXAxis) {

        // replaces chosenXAxis with value
        chosenXAxis = value;

        // console.log(chosenXAxis)

        // functions here found above csv import
        // updates x scale for new data
        xLinearScale = xScale(data, chosenXAxis);

        // updates x axis with transition
        xAxis = renderXAxis(xLinearScale, xAxis);

        yAxis = renderYAxis(yLinearScale, yAxis);

        // updates circles with new x values
        //circlesGroup = renderCircles(circlesGroup, xLinearScale, chosenXAxis);
        circlesGroup = renderCircles(circlesGroup, xLinearScale, chosenXAxis, yLinearScale, chosenYAxis);

        // updates tooltips with new info
        circlesGroup = updateToolTip(data, chosenXAxis, chosenYAxis, circlesGroup);

        // changes classes to change bold text
        if (chosenXAxis === "smokes") {
          smokesLabel
            .classed("active", true)
            .classed("inactive", false);
          povertyLabel
            .classed("active", false)
            .classed("inactive", true);
        }
        else {
          smokesLabel
            .classed("active", false)
            .classed("inactive", true);
          povertyLabel
            .classed("active", true)
            .classed("inactive", false);
        }
      }
    });


  // y axis labels event listener
  labelsGroupY.selectAll("text")
    .on("click", function() {
      // get value of selection
      var value = d3.select(this).attr("value");
      if (value !== chosenYAxis) {

        // replaces chosenYAxis with value
        chosenYAxis = value;

        // console.log(chosenYAxis)

        // functions here found above csv import
        // updates  scale for new data
        yLinearScale = yScale(data, chosenYAxis);

        // updates y axis with transition
        yAxis = renderYAxis(yLinearScale, yAxis);

        xAxis = renderXAxis(xLinearScale, xAxis);

        // updates circles with new x values
        //circlesGroup = renderCircles(circlesGroup, xLinearScale, chosenXAxis);
        circlesGroup = renderCircles(circlesGroup, xLinearScale, chosenXAxis, yLinearScale, chosenYAxis);

        // updates tooltips with new info
        circlesGroup = updateToolTip(data, chosenXAxis, chosenYAxis, circlesGroup);

        // changes classes to change bold text
        if (chosenYAxis === "age") {
          ageLabel
            .classed("active", true)
            .classed("inactive", false);
          incomeLabel
            .classed("active", false)
            .classed("inactive", true);
        }
        else {
          ageLabel
            .classed("active", false)
            .classed("inactive", true);
          incomeLabel
            .classed("active", true)
            .classed("inactive", false);
        }
      }
    });



  }).catch(function(error) {
    console.log(error);
  });
}

makeResponsive();

// Event listener for window resize.
// When the browser window is resized, makeResponsive() is called.
d3.select(window).on("resize", makeResponsive);

